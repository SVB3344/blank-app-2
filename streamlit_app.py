import sys
print(sys.executable)  # –ü—Ä–æ–≤–µ—Ä–∏—Ç —Ç–µ–∫—É—â–∏–π –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä
import streamlit as st
import cv2
import numpy as np
from PIL import Image

st.title("üñºÔ∏è –°—É–¥–ö—É–ª: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", type=["jpg", "png"])
if uploaded_file is not None:
    image = Image.open(uploaded_file)
    img_array = np.array(image)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –≥—Ä–∞–¥–∞—Ü–∏–∏ —Å–µ—Ä–æ–≥–æ
    gray = cv2.cvtColor(img_array, cv2.COLOR_RGB2GRAY)
    
    col1, col2 = st.columns(2)
    with col1:
        st.image(image, caption="–û—Ä–∏–≥–∏–Ω–∞–ª", use_column_width=True)
    with col2:
        st.image(gray, caption="–ß–µ—Ä–Ω–æ-–±–µ–ª–æ–µ", use_column_width=True, clamp=True)
        import streamlit as st
import numpy as np

st.title("üì∑ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∫–∞–º–µ—Ä—ã")

st.markdown("""
### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —à–∞—Ö–º–∞—Ç–Ω–æ–π –¥–æ—Å–∫–∏
2. –£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 9x6)
""")

grid_width = st.number_input("–®–∏—Ä–∏–Ω–∞ —Å–µ—Ç–∫–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–æ–≤)", min_value=3, value=9)
grid_height = st.number_input("–í—ã—Å–æ—Ç–∞ —Å–µ—Ç–∫–∏ (–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–æ–≤)", min_value=3, value=6)

uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏", 
                                type=["jpg", "png"], 
                                accept_multiple_files=True)

if uploaded_files:
    st.success(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(uploaded_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. –†–µ–∂–∏–º –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏...")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –∫–æ–¥ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenCV
    import streamlit as st
from PIL import Image
import torch

st.title("üöó –î–µ—Ç–µ–∫—Ü–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤")

model = torch.hub.load('ultralytics/yolov5', 'yolov5s', pretrained=True)

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–æ–º", type=["jpg", "png"])
if uploaded_file is not None:
    image = Image.open(uploaded_file)
    results = model(image)
    
    st.image(
        results.render()[0], 
        caption=f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(results.xyxy[0])} –æ–±—ä–µ–∫—Ç–æ–≤",
        use_column_width=True
    )
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–ª—å–∫–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤
    vehicles = results.pandas().xyxy[0][results.pandas().xyxy[0]['name'].isin(['car', 'truck', 'bus'])]
    st.write("–û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞:")
    st.dataframe(vehicles)
    import streamlit as st
from PIL import Image
import torch
import pandas as pd
import numpy as np
import streamlit as st
from ultralytics import YOLO
import cv2

# --- –ß–∞—Å—Ç—å 1: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö ---
st.header("üìä –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
data = pd.DataFrame({
    '–í—Ä–µ–º—è': pd.date_range(start='2023-01-01', periods=100, freq='H'),
    '–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞': np.random.normal(25, 5, 100),
    '–í–ª–∞–∂–Ω–æ—Å—Ç—å': np.random.uniform(30, 80, 100)
})

# –ì—Ä–∞—Ñ–∏–∫
st.line_chart(data.set_index('–í—Ä–µ–º—è'))

# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
min_temp, max_temp = st.slider(
    "–î–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä",
    float(data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].min()),
    float(data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'].max()),
    (20.0, 30.0)
)

filtered_data = data[(data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'] >= min_temp) & (data['–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞'] <= max_temp)]
st.write(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered_data)} –∑–∞–ø–∏—Å–µ–π:")
st.dataframe(filtered_data)

st.title("–ú–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - Streamfile")
st.header("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è")

# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ —Å–∞–π–¥–±–∞—Ä–µ
with st.sidebar:
    st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–¥—Ä–æ–≤
    st.markdown("### –ö–∞–¥—Ä—ã")
    start_frame = st.number_input("–ù–∞—á–∞–ª—å–Ω—ã–π –∫–∞–¥—Ä", value=0.0, step=0.1)
    end_frame = st.number_input("–ö–æ–Ω–µ—á–Ω—ã–π –∫–∞–¥—Ä", value=1.0, step=0.1)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
    st.markdown("### –ú–æ–¥–µ–ª—å")
    confidence = st.slider("–ü–æ—Ä–æ–≥ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏", 0.1, 1.0, 0.5)
    
    st.markdown("### YBG –ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ")
    ybg_value = st.text_input("YBG –Ω–∞ Rebelt", "2,3")
    downboxes = st.text_input("Downboxes", "5,3")

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
tab1, tab2 = st.tabs(["–û–±—Ä–∞–±–æ—Ç–∫–∞", "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã"])

with tab1:
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∏–¥–µ–æ/–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", 
                                  type=["mp4", "avi", "jpg", "png"])
    
    if uploaded_file:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ñ–∞–π–ª–∞
        if uploaded_file.type.startswith('video'):
            st.video(uploaded_file)
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ
        else:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            image = np.asarray(bytearray(uploaded_file.read()), dtype=np.uint8)
            image = cv2.imdecode(image, cv2.IMREAD_COLOR)
            st.image(image, caption="–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", channels="BGR")
            
            # –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ YOLO
            if st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ü–∏—é"):
                model = YOLO('yolov8n.pt')
                results = model.predict(image, conf=confidence)
                res_plotted = results[0].plot()  # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                st.image(res_plotted, caption="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–µ—Ç–µ–∫—Ü–∏–∏", channels="BGR")

with tab2:
    st.write("–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    st.write(f"–î–∏–∞–ø–∞–∑–æ–Ω –∫–∞–¥—Ä–æ–≤: {start_frame} - {end_frame}")
    st.write(f"YBG –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ: {ybg_value}")
    st.write(f"Downboxes: {downboxes}")